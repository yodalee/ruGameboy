
type Source = Target;
#[derive(Debug,PartialEq)]
pub enum Target {
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    AF,
    BC,
    DE,
    HL,
    HLINC,
    HLDEC,
    SP,
    D8
}

#[derive(Debug,PartialEq)]
pub enum Condition {
    NotZero,
    Zero,
    NotCarry,
    Carry,
    Always,
}

#[derive(Debug)]
pub enum Instruction {
    NOP,
    JP(Condition),
    JPHL,
    DI,
    EI,
    LDIMM16(Target),
    LDIMM8(Target),
    LD16A,
    LDA16,
    LD8A,
    LDA8,
    LDA16SP,
    LDSPHL,
    LDCA,
    LDAC,
    LDRR(Source, Target),
    CALL(Condition),
    RET(Condition),
    RETI,
    PUSH(Target),
    POP(Target),
    JR(Condition),
    INC16(Target),
    DEC16(Target),
    INC8(Target),
    DEC8(Target),
    ADD(Target),
    ADDHL(Target),
    ADC(Target),
    SUB(Target),
    SBC(Target),
    AND(Target),
    XOR(Target),
    OR(Target),
    CMP(Target),
    RST(u16),
    CPL,
    CCF,
    RRA,
    DAA,
    RLCA,
    STOP,
}

#[derive(Debug)]
pub enum CBInstruction {
    RLC(Target),
    RRC(Target),
    RL(Target),
    RR(Target),
    SLA(Target),
    SRA(Target),
    SWAP(Target),
    SRL(Target),
    BIT(Target, u32),
    RES(Target, u32),
    SET(Target, u32),
}

impl Instruction {
    pub fn from_byte(byte: u8) -> Option<Instruction> {
        match byte {
            0x00 => Some(Instruction::NOP),
            0xc2 => Some(Instruction::JP(Condition::NotZero)),
            0xc3 => Some(Instruction::JP(Condition::Always)),
            0xca => Some(Instruction::JP(Condition::Zero)),
            0xd2 => Some(Instruction::JP(Condition::NotCarry)),
            0xda => Some(Instruction::JP(Condition::Carry)),
            0xe9 => Some(Instruction::JPHL),
            0xf3 => Some(Instruction::DI),
            0xfb => Some(Instruction::EI),
            0x01 => Some(Instruction::LDIMM16(Target::BC)),
            0x11 => Some(Instruction::LDIMM16(Target::DE)),
            0x21 => Some(Instruction::LDIMM16(Target::HL)),
            0x31 => Some(Instruction::LDIMM16(Target::SP)),
            0xea => Some(Instruction::LD16A),
            0xfa => Some(Instruction::LDA16),
            0x08 => Some(Instruction::LDA16SP),
            0xf9 => Some(Instruction::LDSPHL),
            0x06 => Some(Instruction::LDIMM8(Target::B)),
            0x16 => Some(Instruction::LDIMM8(Target::D)),
            0x26 => Some(Instruction::LDIMM8(Target::H)),
            0x36 => Some(Instruction::LDIMM8(Target::HL)),
            0x0e => Some(Instruction::LDIMM8(Target::C)),
            0x1e => Some(Instruction::LDIMM8(Target::E)),
            0x2e => Some(Instruction::LDIMM8(Target::L)),
            0x3e => Some(Instruction::LDIMM8(Target::A)),
            0xe0 => Some(Instruction::LD8A),
            0xf0 => Some(Instruction::LDA8),
            0xc4 => Some(Instruction::CALL(Condition::NotZero)),
            0xcc => Some(Instruction::CALL(Condition::Zero)),
            0xcd => Some(Instruction::CALL(Condition::Always)),
            0xd4 => Some(Instruction::CALL(Condition::NotCarry)),
            0xdc => Some(Instruction::CALL(Condition::Carry)),
            0xc0 => Some(Instruction::RET(Condition::NotZero)),
            0xc8 => Some(Instruction::RET(Condition::Zero)),
            0xc9 => Some(Instruction::RET(Condition::Always)),
            0xd0 => Some(Instruction::RET(Condition::NotCarry)),
            0xd8 => Some(Instruction::RET(Condition::Carry)),
            0xd9 => Some(Instruction::RETI),
            0xc5 => Some(Instruction::PUSH(Target::BC)),
            0xd5 => Some(Instruction::PUSH(Target::DE)),
            0xe5 => Some(Instruction::PUSH(Target::HL)),
            0xf5 => Some(Instruction::PUSH(Target::AF)),
            0xc1 => Some(Instruction::POP(Target::BC)),
            0xd1 => Some(Instruction::POP(Target::DE)),
            0xe1 => Some(Instruction::POP(Target::HL)),
            0xf1 => Some(Instruction::POP(Target::AF)),
            0x02 => Some(Instruction::LDRR(Target::A, Target::BC)),
            0x12 => Some(Instruction::LDRR(Target::A, Target::DE)),
            0x22 => Some(Instruction::LDRR(Target::A, Target::HLINC)),
            0x32 => Some(Instruction::LDRR(Target::A, Target::HLDEC)),
            0x0a => Some(Instruction::LDRR(Target::BC, Target::A)),
            0x1a => Some(Instruction::LDRR(Target::DE, Target::A)),
            0x2a => Some(Instruction::LDRR(Target::HLINC, Target::A)),
            0x3a => Some(Instruction::LDRR(Target::HLDEC, Target::A)),
            0x40 => Some(Instruction::LDRR(Target::B,  Target::B)),
            0x41 => Some(Instruction::LDRR(Target::C,  Target::B)),
            0x42 => Some(Instruction::LDRR(Target::D,  Target::B)),
            0x43 => Some(Instruction::LDRR(Target::E,  Target::B)),
            0x44 => Some(Instruction::LDRR(Target::H,  Target::B)),
            0x45 => Some(Instruction::LDRR(Target::L,  Target::B)),
            0x46 => Some(Instruction::LDRR(Target::HL, Target::B)),
            0x47 => Some(Instruction::LDRR(Target::A,  Target::B)),
            0x48 => Some(Instruction::LDRR(Target::B,  Target::C)),
            0x49 => Some(Instruction::LDRR(Target::C,  Target::C)),
            0x4a => Some(Instruction::LDRR(Target::D,  Target::C)),
            0x4b => Some(Instruction::LDRR(Target::E,  Target::C)),
            0x4c => Some(Instruction::LDRR(Target::H,  Target::C)),
            0x4d => Some(Instruction::LDRR(Target::L,  Target::C)),
            0x4e => Some(Instruction::LDRR(Target::HL, Target::C)),
            0x4f => Some(Instruction::LDRR(Target::A,  Target::C)),
            0x50 => Some(Instruction::LDRR(Target::B,  Target::D)),
            0x51 => Some(Instruction::LDRR(Target::C,  Target::D)),
            0x52 => Some(Instruction::LDRR(Target::D,  Target::D)),
            0x53 => Some(Instruction::LDRR(Target::E,  Target::D)),
            0x54 => Some(Instruction::LDRR(Target::H,  Target::D)),
            0x55 => Some(Instruction::LDRR(Target::L,  Target::D)),
            0x56 => Some(Instruction::LDRR(Target::HL, Target::D)),
            0x57 => Some(Instruction::LDRR(Target::A,  Target::D)),
            0x58 => Some(Instruction::LDRR(Target::B,  Target::E)),
            0x59 => Some(Instruction::LDRR(Target::C,  Target::E)),
            0x5a => Some(Instruction::LDRR(Target::D,  Target::E)),
            0x5b => Some(Instruction::LDRR(Target::E,  Target::E)),
            0x5c => Some(Instruction::LDRR(Target::H,  Target::E)),
            0x5d => Some(Instruction::LDRR(Target::L,  Target::E)),
            0x5e => Some(Instruction::LDRR(Target::HL, Target::E)),
            0x5f => Some(Instruction::LDRR(Target::A,  Target::E)),
            0x60 => Some(Instruction::LDRR(Target::B,  Target::H)),
            0x61 => Some(Instruction::LDRR(Target::C,  Target::H)),
            0x62 => Some(Instruction::LDRR(Target::D,  Target::H)),
            0x63 => Some(Instruction::LDRR(Target::E,  Target::H)),
            0x64 => Some(Instruction::LDRR(Target::H,  Target::H)),
            0x65 => Some(Instruction::LDRR(Target::L,  Target::H)),
            0x66 => Some(Instruction::LDRR(Target::HL, Target::H)),
            0x67 => Some(Instruction::LDRR(Target::A,  Target::H)),
            0x68 => Some(Instruction::LDRR(Target::B,  Target::L)),
            0x69 => Some(Instruction::LDRR(Target::C,  Target::L)),
            0x6a => Some(Instruction::LDRR(Target::D,  Target::L)),
            0x6b => Some(Instruction::LDRR(Target::E,  Target::L)),
            0x6c => Some(Instruction::LDRR(Target::H,  Target::L)),
            0x6d => Some(Instruction::LDRR(Target::L,  Target::L)),
            0x6e => Some(Instruction::LDRR(Target::HL, Target::L)),
            0x6f => Some(Instruction::LDRR(Target::A,  Target::L)),
            0x70 => Some(Instruction::LDRR(Target::B,  Target::HL)),
            0x71 => Some(Instruction::LDRR(Target::C,  Target::HL)),
            0x72 => Some(Instruction::LDRR(Target::D,  Target::HL)),
            0x73 => Some(Instruction::LDRR(Target::E,  Target::HL)),
            0x74 => Some(Instruction::LDRR(Target::H,  Target::HL)),
            0x75 => Some(Instruction::LDRR(Target::L,  Target::HL)),
            0x77 => Some(Instruction::LDRR(Target::A,  Target::HL)),
            0x78 => Some(Instruction::LDRR(Target::B, Target::A)),
            0x79 => Some(Instruction::LDRR(Target::C, Target::A)),
            0x7a => Some(Instruction::LDRR(Target::D, Target::A)),
            0x7b => Some(Instruction::LDRR(Target::E, Target::A)),
            0x7c => Some(Instruction::LDRR(Target::H, Target::A)),
            0x7d => Some(Instruction::LDRR(Target::L, Target::A)),
            0x7e => Some(Instruction::LDRR(Target::HL, Target::A)),
            0x7f => Some(Instruction::LDRR(Target::A, Target::A)),
            0x18 => Some(Instruction::JR(Condition::Always)),
            0x20 => Some(Instruction::JR(Condition::NotZero)),
            0x28 => Some(Instruction::JR(Condition::Zero)),
            0x30 => Some(Instruction::JR(Condition::NotCarry)),
            0x38 => Some(Instruction::JR(Condition::Carry)),
            0x03 => Some(Instruction::INC16(Target::BC)),
            0x13 => Some(Instruction::INC16(Target::DE)),
            0x23 => Some(Instruction::INC16(Target::HL)),
            0x33 => Some(Instruction::INC16(Target::SP)),
            0x0b => Some(Instruction::DEC16(Target::BC)),
            0x1b => Some(Instruction::DEC16(Target::DE)),
            0x2b => Some(Instruction::DEC16(Target::HL)),
            0x3b => Some(Instruction::DEC16(Target::SP)),
            0x04 => Some(Instruction::INC8(Target::B)),
            0x14 => Some(Instruction::INC8(Target::D)),
            0x24 => Some(Instruction::INC8(Target::H)),
            0x34 => Some(Instruction::INC8(Target::HL)),
            0x0c => Some(Instruction::INC8(Target::C)),
            0x1c => Some(Instruction::INC8(Target::E)),
            0x2c => Some(Instruction::INC8(Target::L)),
            0x3c => Some(Instruction::INC8(Target::A)),
            0x05 => Some(Instruction::DEC8(Target::B)),
            0x15 => Some(Instruction::DEC8(Target::D)),
            0x25 => Some(Instruction::DEC8(Target::H)),
            0x35 => Some(Instruction::DEC8(Target::HL)),
            0x0d => Some(Instruction::DEC8(Target::C)),
            0x1d => Some(Instruction::DEC8(Target::E)),
            0x2d => Some(Instruction::DEC8(Target::L)),
            0x3d => Some(Instruction::DEC8(Target::A)),
            0x80 => Some(Instruction::ADD(Target::B)),
            0x81 => Some(Instruction::ADD(Target::C)),
            0x82 => Some(Instruction::ADD(Target::D)),
            0x83 => Some(Instruction::ADD(Target::E)),
            0x84 => Some(Instruction::ADD(Target::H)),
            0x85 => Some(Instruction::ADD(Target::L)),
            0x86 => Some(Instruction::ADD(Target::HL)),
            0x87 => Some(Instruction::ADD(Target::A)),
            0xc6 => Some(Instruction::ADD(Target::D8)),
            0x88 => Some(Instruction::ADC(Target::B)),
            0x89 => Some(Instruction::ADC(Target::C)),
            0x8a => Some(Instruction::ADC(Target::D)),
            0x8b => Some(Instruction::ADC(Target::E)),
            0x8c => Some(Instruction::ADC(Target::H)),
            0x8d => Some(Instruction::ADC(Target::L)),
            0x8e => Some(Instruction::ADC(Target::HL)),
            0x8f => Some(Instruction::ADC(Target::A)),
            0xce => Some(Instruction::ADC(Target::D8)),
            0x90 => Some(Instruction::SUB(Target::B)),
            0x91 => Some(Instruction::SUB(Target::C)),
            0x92 => Some(Instruction::SUB(Target::D)),
            0x93 => Some(Instruction::SUB(Target::E)),
            0x94 => Some(Instruction::SUB(Target::H)),
            0x95 => Some(Instruction::SUB(Target::L)),
            0x96 => Some(Instruction::SUB(Target::HL)),
            0x97 => Some(Instruction::SUB(Target::A)),
            0xd6 => Some(Instruction::SUB(Target::D8)),
            0x98 => Some(Instruction::SBC(Target::B)),
            0x99 => Some(Instruction::SBC(Target::C)),
            0x9a => Some(Instruction::SBC(Target::D)),
            0x9b => Some(Instruction::SBC(Target::E)),
            0x9c => Some(Instruction::SBC(Target::H)),
            0x9d => Some(Instruction::SBC(Target::L)),
            0x9e => Some(Instruction::SBC(Target::HL)),
            0x9f => Some(Instruction::SBC(Target::A)),
            0xde => Some(Instruction::SBC(Target::D8)),
            0xa0 => Some(Instruction::AND(Target::B)),
            0xa1 => Some(Instruction::AND(Target::C)),
            0xa2 => Some(Instruction::AND(Target::D)),
            0xa3 => Some(Instruction::AND(Target::E)),
            0xa4 => Some(Instruction::AND(Target::H)),
            0xa5 => Some(Instruction::AND(Target::L)),
            0xa6 => Some(Instruction::AND(Target::HL)),
            0xa7 => Some(Instruction::AND(Target::A)),
            0xe6 => Some(Instruction::AND(Target::D8)),
            0xa8 => Some(Instruction::XOR(Target::B)),
            0xa9 => Some(Instruction::XOR(Target::C)),
            0xaa => Some(Instruction::XOR(Target::D)),
            0xab => Some(Instruction::XOR(Target::E)),
            0xac => Some(Instruction::XOR(Target::H)),
            0xad => Some(Instruction::XOR(Target::L)),
            0xae => Some(Instruction::XOR(Target::HL)),
            0xaf => Some(Instruction::XOR(Target::A)),
            0xee => Some(Instruction::XOR(Target::D8)),
            0xb0 => Some(Instruction::OR(Target::B)),
            0xb1 => Some(Instruction::OR(Target::C)),
            0xb2 => Some(Instruction::OR(Target::D)),
            0xb3 => Some(Instruction::OR(Target::E)),
            0xb4 => Some(Instruction::OR(Target::H)),
            0xb5 => Some(Instruction::OR(Target::L)),
            0xb6 => Some(Instruction::OR(Target::HL)),
            0xb7 => Some(Instruction::OR(Target::A)),
            0xf6 => Some(Instruction::OR(Target::D8)),
            0xb8 => Some(Instruction::CMP(Target::B)),
            0xb9 => Some(Instruction::CMP(Target::C)),
            0xba => Some(Instruction::CMP(Target::D)),
            0xbb => Some(Instruction::CMP(Target::E)),
            0xbc => Some(Instruction::CMP(Target::H)),
            0xbd => Some(Instruction::CMP(Target::L)),
            0xbe => Some(Instruction::CMP(Target::HL)),
            0xbf => Some(Instruction::CMP(Target::A)),
            0xfe => Some(Instruction::CMP(Target::D8)),
            0xc7 => Some(Instruction::RST(0x00)),
            0xcf => Some(Instruction::RST(0x08)),
            0xd7 => Some(Instruction::RST(0x10)),
            0xdf => Some(Instruction::RST(0x18)),
            0xe7 => Some(Instruction::RST(0x20)),
            0xef => Some(Instruction::RST(0x28)),
            0xf7 => Some(Instruction::RST(0x30)),
            0xff => Some(Instruction::RST(0x38)),
            0xe2 => Some(Instruction::LDCA),
            0xf2 => Some(Instruction::LDAC),
            0x2f => Some(Instruction::CPL),
            0x3f => Some(Instruction::CCF),
            0x09 => Some(Instruction::ADDHL(Target::BC)),
            0x19 => Some(Instruction::ADDHL(Target::DE)),
            0x29 => Some(Instruction::ADDHL(Target::HL)),
            0x39 => Some(Instruction::ADDHL(Target::SP)),
            0x1f => Some(Instruction::RRA),
            0x27 => Some(Instruction::DAA),
            0x07 => Some(Instruction::RLCA),
            0x10 => Some(Instruction::STOP),
            _ => None
        }
    }

    pub fn len(&self) -> u16 {
        match self {
            Instruction::JP(_) => 2,
            Instruction::LDIMM16(_) => 2,
            Instruction::LDIMM8(_) => 1,
            Instruction::LD16A => 2,
            Instruction::LDA16 => 2,
            Instruction::LDA16SP => 2,
            Instruction::LD8A => 1,
            Instruction::LDA8 => 1,
            Instruction::CALL(_) => 2,
            Instruction::JR(_) => 1,
            Instruction::ADD(Target::D8) => 1,
            Instruction::ADC(Target::D8) => 1,
            Instruction::SUB(Target::D8) => 1,
            Instruction::SBC(Target::D8) => 1,
            Instruction::AND(Target::D8) => 1,
            Instruction::XOR(Target::D8) => 1,
            Instruction::OR(Target::D8) =>  1,
            Instruction::CMP(Target::D8) => 1,
            Instruction::STOP => 1,
            _ => 0,
        }
    }

    pub fn clock(&self) -> u64 {
        // return clock of instruction, default non-taken action
        match self {
            Instruction::NOP => 4,
            Instruction::JP(_) => 12,
            Instruction::JPHL => 4,
            Instruction::DI => 4,
            Instruction::EI => 4,
            Instruction::LDIMM16(_) => 12,
            Instruction::LDIMM8(t) => if t == &Target::HL { 12 } else { 8 },
            Instruction::LD16A => 16,
            Instruction::LDA16 => 16,
            Instruction::LDA16SP => 20,
            Instruction::LDSPHL => 8,
            Instruction::LD8A => 12,
            Instruction::LDA8 => 12,
            Instruction::LDCA => 8,
            Instruction::LDAC => 8,
            Instruction::LDRR(s, t) =>
                if s == &Target::HL || t == &Target::HL {
                    8
                } else {
                    4
                },
            Instruction::CALL(_) => 12,
            Instruction::RET(_) => 8,
            Instruction::RETI => 16,
            Instruction::PUSH(_) => 16,
            Instruction::POP(_)  => 12,
            Instruction::JR(_) => 8,
            Instruction::INC16(_) => 8,
            Instruction::DEC16(_) => 8,
            Instruction::INC8(t) | Instruction::DEC8(t) =>
                if t == &Target::HL {
                    12
                } else {
                    4
                },
            Instruction::ADD(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::ADC(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::SUB(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::SBC(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::AND(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::XOR(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::OR(t) =>  if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::CMP(t) => if t == &Target::D8 || t == &Target::HL { 2 } else { 1 },
            Instruction::RST(_) => 16,
            Instruction::CPL => 4,
            Instruction::CCF => 4,
            Instruction::ADDHL(_) => 8,
            Instruction::RRA => 4,
            Instruction::DAA => 4,
            Instruction::RLCA => 4,
            Instruction::STOP => 4,
        }
    }
}

impl CBInstruction {
    pub fn from_byte(byte: u8) -> CBInstruction {
        match byte {
            0x00 => CBInstruction::RLC(Target::B),
            0x01 => CBInstruction::RLC(Target::C),
            0x02 => CBInstruction::RLC(Target::D),
            0x03 => CBInstruction::RLC(Target::E),
            0x04 => CBInstruction::RLC(Target::H),
            0x05 => CBInstruction::RLC(Target::L),
            0x06 => CBInstruction::RLC(Target::HL),
            0x07 => CBInstruction::RLC(Target::A),
            0x08 => CBInstruction::RRC(Target::B),
            0x09 => CBInstruction::RRC(Target::C),
            0x0a => CBInstruction::RRC(Target::D),
            0x0b => CBInstruction::RRC(Target::E),
            0x0c => CBInstruction::RRC(Target::H),
            0x0d => CBInstruction::RRC(Target::L),
            0x0e => CBInstruction::RRC(Target::HL),
            0x0f => CBInstruction::RRC(Target::A),
            0x10 => CBInstruction::RL(Target::B),
            0x11 => CBInstruction::RL(Target::C),
            0x12 => CBInstruction::RL(Target::D),
            0x13 => CBInstruction::RL(Target::E),
            0x14 => CBInstruction::RL(Target::H),
            0x15 => CBInstruction::RL(Target::L),
            0x16 => CBInstruction::RL(Target::HL),
            0x17 => CBInstruction::RL(Target::A),
            0x18 => CBInstruction::RR(Target::B),
            0x19 => CBInstruction::RR(Target::C),
            0x1a => CBInstruction::RR(Target::D),
            0x1b => CBInstruction::RR(Target::E),
            0x1c => CBInstruction::RR(Target::H),
            0x1d => CBInstruction::RR(Target::L),
            0x1e => CBInstruction::RR(Target::HL),
            0x1f => CBInstruction::RR(Target::A),
            0x20 => CBInstruction::SLA(Target::B),
            0x21 => CBInstruction::SLA(Target::C),
            0x22 => CBInstruction::SLA(Target::D),
            0x23 => CBInstruction::SLA(Target::E),
            0x24 => CBInstruction::SLA(Target::H),
            0x25 => CBInstruction::SLA(Target::L),
            0x26 => CBInstruction::SLA(Target::HL),
            0x27 => CBInstruction::SLA(Target::A),
            0x28 => CBInstruction::SRA(Target::B),
            0x29 => CBInstruction::SRA(Target::C),
            0x2a => CBInstruction::SRA(Target::D),
            0x2b => CBInstruction::SRA(Target::E),
            0x2c => CBInstruction::SRA(Target::H),
            0x2d => CBInstruction::SRA(Target::L),
            0x2e => CBInstruction::SRA(Target::HL),
            0x2f => CBInstruction::SRA(Target::A),
            0x30 => CBInstruction::SWAP(Target::B),
            0x31 => CBInstruction::SWAP(Target::C),
            0x32 => CBInstruction::SWAP(Target::D),
            0x33 => CBInstruction::SWAP(Target::E),
            0x34 => CBInstruction::SWAP(Target::H),
            0x35 => CBInstruction::SWAP(Target::L),
            0x36 => CBInstruction::SWAP(Target::HL),
            0x37 => CBInstruction::SWAP(Target::A),
            0x38 => CBInstruction::SRL(Target::B),
            0x39 => CBInstruction::SRL(Target::C),
            0x3a => CBInstruction::SRL(Target::D),
            0x3b => CBInstruction::SRL(Target::E),
            0x3c => CBInstruction::SRL(Target::H),
            0x3d => CBInstruction::SRL(Target::L),
            0x3e => CBInstruction::SRL(Target::HL),
            0x3f => CBInstruction::SRL(Target::A),
            0x40 => CBInstruction::BIT(Target::B, 0),
            0x41 => CBInstruction::BIT(Target::C, 0),
            0x42 => CBInstruction::BIT(Target::D, 0),
            0x43 => CBInstruction::BIT(Target::E, 0),
            0x44 => CBInstruction::BIT(Target::H, 0),
            0x45 => CBInstruction::BIT(Target::L, 0),
            0x46 => CBInstruction::BIT(Target::HL, 0),
            0x47 => CBInstruction::BIT(Target::A, 0),
            0x48 => CBInstruction::BIT(Target::B, 1),
            0x49 => CBInstruction::BIT(Target::C, 1),
            0x4a => CBInstruction::BIT(Target::D, 1),
            0x4b => CBInstruction::BIT(Target::E, 1),
            0x4c => CBInstruction::BIT(Target::H, 1),
            0x4d => CBInstruction::BIT(Target::L, 1),
            0x4e => CBInstruction::BIT(Target::HL, 1),
            0x4f => CBInstruction::BIT(Target::A, 1),
            0x50 => CBInstruction::BIT(Target::B, 2),
            0x51 => CBInstruction::BIT(Target::C, 2),
            0x52 => CBInstruction::BIT(Target::D, 2),
            0x53 => CBInstruction::BIT(Target::E, 2),
            0x54 => CBInstruction::BIT(Target::H, 2),
            0x55 => CBInstruction::BIT(Target::L, 2),
            0x56 => CBInstruction::BIT(Target::HL, 2),
            0x57 => CBInstruction::BIT(Target::A, 2),
            0x58 => CBInstruction::BIT(Target::B, 3),
            0x59 => CBInstruction::BIT(Target::C, 3),
            0x5a => CBInstruction::BIT(Target::D, 3),
            0x5b => CBInstruction::BIT(Target::E, 3),
            0x5c => CBInstruction::BIT(Target::H, 3),
            0x5d => CBInstruction::BIT(Target::L, 3),
            0x5e => CBInstruction::BIT(Target::HL, 3),
            0x5f => CBInstruction::BIT(Target::A, 3),
            0x60 => CBInstruction::BIT(Target::B, 4),
            0x61 => CBInstruction::BIT(Target::C, 4),
            0x62 => CBInstruction::BIT(Target::D, 4),
            0x63 => CBInstruction::BIT(Target::E, 4),
            0x64 => CBInstruction::BIT(Target::H, 4),
            0x65 => CBInstruction::BIT(Target::L, 4),
            0x66 => CBInstruction::BIT(Target::HL, 4),
            0x67 => CBInstruction::BIT(Target::A, 4),
            0x68 => CBInstruction::BIT(Target::B, 5),
            0x69 => CBInstruction::BIT(Target::C, 5),
            0x6a => CBInstruction::BIT(Target::D, 5),
            0x6b => CBInstruction::BIT(Target::E, 5),
            0x6c => CBInstruction::BIT(Target::H, 5),
            0x6d => CBInstruction::BIT(Target::L, 5),
            0x6e => CBInstruction::BIT(Target::HL, 5),
            0x6f => CBInstruction::BIT(Target::A, 5),
            0x70 => CBInstruction::BIT(Target::B, 6),
            0x71 => CBInstruction::BIT(Target::C, 6),
            0x72 => CBInstruction::BIT(Target::D, 6),
            0x73 => CBInstruction::BIT(Target::E, 6),
            0x74 => CBInstruction::BIT(Target::H, 6),
            0x75 => CBInstruction::BIT(Target::L, 6),
            0x76 => CBInstruction::BIT(Target::HL, 6),
            0x77 => CBInstruction::BIT(Target::A, 6),
            0x78 => CBInstruction::BIT(Target::B, 7),
            0x79 => CBInstruction::BIT(Target::C, 7),
            0x7a => CBInstruction::BIT(Target::D, 7),
            0x7b => CBInstruction::BIT(Target::E, 7),
            0x7c => CBInstruction::BIT(Target::H, 7),
            0x7d => CBInstruction::BIT(Target::L, 7),
            0x7e => CBInstruction::BIT(Target::HL, 7),
            0x7f => CBInstruction::BIT(Target::A, 7),
            0x80 => CBInstruction::RES(Target::B, 0),
            0x81 => CBInstruction::RES(Target::C, 0),
            0x82 => CBInstruction::RES(Target::D, 0),
            0x83 => CBInstruction::RES(Target::E, 0),
            0x84 => CBInstruction::RES(Target::H, 0),
            0x85 => CBInstruction::RES(Target::L, 0),
            0x86 => CBInstruction::RES(Target::HL, 0),
            0x87 => CBInstruction::RES(Target::A, 0),
            0x88 => CBInstruction::RES(Target::B, 1),
            0x89 => CBInstruction::RES(Target::C, 1),
            0x8a => CBInstruction::RES(Target::D, 1),
            0x8b => CBInstruction::RES(Target::E, 1),
            0x8c => CBInstruction::RES(Target::H, 1),
            0x8d => CBInstruction::RES(Target::L, 1),
            0x8e => CBInstruction::RES(Target::HL, 1),
            0x8f => CBInstruction::RES(Target::A, 1),
            0x90 => CBInstruction::RES(Target::B, 2),
            0x91 => CBInstruction::RES(Target::C, 2),
            0x92 => CBInstruction::RES(Target::D, 2),
            0x93 => CBInstruction::RES(Target::E, 2),
            0x94 => CBInstruction::RES(Target::H, 2),
            0x95 => CBInstruction::RES(Target::L, 2),
            0x96 => CBInstruction::RES(Target::HL, 2),
            0x97 => CBInstruction::RES(Target::A, 2),
            0x98 => CBInstruction::RES(Target::B, 3),
            0x99 => CBInstruction::RES(Target::C, 3),
            0x9a => CBInstruction::RES(Target::D, 3),
            0x9b => CBInstruction::RES(Target::E, 3),
            0x9c => CBInstruction::RES(Target::H, 3),
            0x9d => CBInstruction::RES(Target::L, 3),
            0x9e => CBInstruction::RES(Target::HL, 3),
            0x9f => CBInstruction::RES(Target::A, 3),
            0xa0 => CBInstruction::RES(Target::B, 4),
            0xa1 => CBInstruction::RES(Target::C, 4),
            0xa2 => CBInstruction::RES(Target::D, 4),
            0xa3 => CBInstruction::RES(Target::E, 4),
            0xa4 => CBInstruction::RES(Target::H, 4),
            0xa5 => CBInstruction::RES(Target::L, 4),
            0xa6 => CBInstruction::RES(Target::HL, 4),
            0xa7 => CBInstruction::RES(Target::A, 4),
            0xa8 => CBInstruction::RES(Target::B, 5),
            0xa9 => CBInstruction::RES(Target::C, 5),
            0xaa => CBInstruction::RES(Target::D, 5),
            0xab => CBInstruction::RES(Target::E, 5),
            0xac => CBInstruction::RES(Target::H, 5),
            0xad => CBInstruction::RES(Target::L, 5),
            0xae => CBInstruction::RES(Target::HL, 5),
            0xaf => CBInstruction::RES(Target::A, 5),
            0xb0 => CBInstruction::RES(Target::B, 6),
            0xb1 => CBInstruction::RES(Target::C, 6),
            0xb2 => CBInstruction::RES(Target::D, 6),
            0xb3 => CBInstruction::RES(Target::E, 6),
            0xb4 => CBInstruction::RES(Target::H, 6),
            0xb5 => CBInstruction::RES(Target::L, 6),
            0xb6 => CBInstruction::RES(Target::HL, 6),
            0xb7 => CBInstruction::RES(Target::A, 6),
            0xb8 => CBInstruction::RES(Target::B, 7),
            0xb9 => CBInstruction::RES(Target::C, 7),
            0xba => CBInstruction::RES(Target::D, 7),
            0xbb => CBInstruction::RES(Target::E, 7),
            0xbc => CBInstruction::RES(Target::H, 7),
            0xbd => CBInstruction::RES(Target::L, 7),
            0xbe => CBInstruction::RES(Target::HL, 7),
            0xbf => CBInstruction::RES(Target::A, 7),
            0xc0 => CBInstruction::SET(Target::B, 0),
            0xc1 => CBInstruction::SET(Target::C, 0),
            0xc2 => CBInstruction::SET(Target::D, 0),
            0xc3 => CBInstruction::SET(Target::E, 0),
            0xc4 => CBInstruction::SET(Target::H, 0),
            0xc5 => CBInstruction::SET(Target::L, 0),
            0xc6 => CBInstruction::SET(Target::HL, 0),
            0xc7 => CBInstruction::SET(Target::A, 0),
            0xc8 => CBInstruction::SET(Target::B, 1),
            0xc9 => CBInstruction::SET(Target::C, 1),
            0xca => CBInstruction::SET(Target::D, 1),
            0xcb => CBInstruction::SET(Target::E, 1),
            0xcc => CBInstruction::SET(Target::H, 1),
            0xcd => CBInstruction::SET(Target::L, 1),
            0xce => CBInstruction::SET(Target::HL, 1),
            0xcf => CBInstruction::SET(Target::A, 1),
            0xd0 => CBInstruction::SET(Target::B, 2),
            0xd1 => CBInstruction::SET(Target::C, 2),
            0xd2 => CBInstruction::SET(Target::D, 2),
            0xd3 => CBInstruction::SET(Target::E, 2),
            0xd4 => CBInstruction::SET(Target::H, 2),
            0xd5 => CBInstruction::SET(Target::L, 2),
            0xd6 => CBInstruction::SET(Target::HL, 2),
            0xd7 => CBInstruction::SET(Target::A, 2),
            0xd8 => CBInstruction::SET(Target::B, 3),
            0xd9 => CBInstruction::SET(Target::C, 3),
            0xda => CBInstruction::SET(Target::D, 3),
            0xdb => CBInstruction::SET(Target::E, 3),
            0xdc => CBInstruction::SET(Target::H, 3),
            0xdd => CBInstruction::SET(Target::L, 3),
            0xde => CBInstruction::SET(Target::HL, 3),
            0xdf => CBInstruction::SET(Target::A, 3),
            0xe0 => CBInstruction::SET(Target::B, 4),
            0xe1 => CBInstruction::SET(Target::C, 4),
            0xe2 => CBInstruction::SET(Target::D, 4),
            0xe3 => CBInstruction::SET(Target::E, 4),
            0xe4 => CBInstruction::SET(Target::H, 4),
            0xe5 => CBInstruction::SET(Target::L, 4),
            0xe6 => CBInstruction::SET(Target::HL, 4),
            0xe7 => CBInstruction::SET(Target::A, 4),
            0xe8 => CBInstruction::SET(Target::B, 5),
            0xe9 => CBInstruction::SET(Target::C, 5),
            0xea => CBInstruction::SET(Target::D, 5),
            0xeb => CBInstruction::SET(Target::E, 5),
            0xec => CBInstruction::SET(Target::H, 5),
            0xed => CBInstruction::SET(Target::L, 5),
            0xee => CBInstruction::SET(Target::HL, 5),
            0xef => CBInstruction::SET(Target::A, 5),
            0xf0 => CBInstruction::SET(Target::B, 6),
            0xf1 => CBInstruction::SET(Target::C, 6),
            0xf2 => CBInstruction::SET(Target::D, 6),
            0xf3 => CBInstruction::SET(Target::E, 6),
            0xf4 => CBInstruction::SET(Target::H, 6),
            0xf5 => CBInstruction::SET(Target::L, 6),
            0xf6 => CBInstruction::SET(Target::HL, 6),
            0xf7 => CBInstruction::SET(Target::A, 6),
            0xf8 => CBInstruction::SET(Target::B, 7),
            0xf9 => CBInstruction::SET(Target::C, 7),
            0xfa => CBInstruction::SET(Target::D, 7),
            0xfb => CBInstruction::SET(Target::E, 7),
            0xfc => CBInstruction::SET(Target::H, 7),
            0xfd => CBInstruction::SET(Target::L, 7),
            0xfe => CBInstruction::SET(Target::HL, 7),
            0xff => CBInstruction::SET(Target::A, 7),
        }
    }

    pub fn clock(&self) -> u64 {
        match &self {
            CBInstruction::RLC(target)      |
            CBInstruction::RRC(target)      |
            CBInstruction::RL(target)       |
            CBInstruction::RR(target)       |
            CBInstruction::SLA(target)      |
            CBInstruction::SRA(target)      |
            CBInstruction::SWAP(target)     |
            CBInstruction::SRL(target)      |
            CBInstruction::BIT(target, _) |
            CBInstruction::RES(target, _) |
            CBInstruction::SET(target, _) => {
                if target == &Target::HL { 16 } else { 8 }
            }
        }
    }
}
